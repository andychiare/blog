---
layout: post
title: "Handling Server-Sent Events with React and Node.js"
description: "A practical tutorial showing how to handle events generated by a server application using the Server-Sent Events specification."
longdescription: "In this article, you will learn how to generate Server-Sent Events in a Node.js server and how to handle them in a React application. Although the application example provided by the article involves React and Node.js, the concepts are applicable to any language and technology."
date: xxxx-xx-xx xx:xx
category: Technical Guide, Frontend, Backend, JavaScript
author:
  name: "Andrea Chiarelli"
  url: "https://twitter.com/andychiare"
  mail: "andrea.chiarelli.ac@gmail.com"
  avatar: "https://cdn.auth0.com/blog/guest-author/andrea-chiarelli.jpg"
design:
  bg_color: "#2f333b"
  image: https://cdn.auth0.com/blog/xxxxxxxx
tags:
- server-sent-events
- event-source
- javascript
- frontend
- react
- nodejs
- backend
related:
- xxxxxxxxxx
- xxxxxxxxxx
---

**TL;DR:** [Server-Sent Events](https://html.spec.whatwg.org/multipage/server-sent-events.html) or SSE is a standard enabling a Web server to push data to the client. In this article, we will learn how to use them by building a simple application with React and Node.js. However, the concepts you will learn following this tutorial are applicable to any language and technology. [You can find the final code of the application in this GitHub repository](https://github.com/andychiare/server-sent-events).

---

## Introducing Server-Sent Events

The typical interaction between a browser and a web server has the browser requesting a resource and the web server providing a response. But how could we describe an event where the server is sending data to the client at any time without an explicit request? If such behavior is to be implemented using the HTTP protocol, it may seem impossible since HTTP only allows the client to request data from the server and not the opposite.

Well, we can do that using our dear friend HTTP. We can use [Server-Sent Events](https://html.spec.whatwg.org/multipage/server-sent-events.html), also known as *SSE* or *Event Source*, a W3C standard that allows the server to push data to the client. This may suggest using that annoying polling we'd implement to get the progress status from a long server processing, but thanks to SSE, we don't have to implement polling to wait for a response from the server. We don't need any complex and strange protocol, we can continue to use the standard HTTP.

So let's take a look at how to use Server-Sent Events in a realistic application.

## Let's Build a Flight Timetable

In order to show how to use the Server-Sent Events, we are going to implement a simple flight timetable similar to the ones you can find at any airport. The timetable is a simple web page showing a list of flights as shown in the following picture:

![](.\xxx-images\flights-timetable.png)

Here, we can find the arrival timetable, whose items will be automatically updated when the state of a flight changes. In our application, we are going to simulate the flight state changes using scheduled events; however, this does not affect the realism and scope of our implementation.

So, let's start coding and discover how Server-Sent Events work.

## Starting to Build the React Client

As a first step, let's build our client application. To make things simple, you will use [create-react-app](https://github.com/facebook/create-react-app) to set up the React-based client. So, be sure to get installed [Node.js](https://nodejs.org) on your machine and type the following command in a shell window:

```shell
npm install -g create-react-app
```

This command will install *create-react-app* on your computer. Then let's create the basic template of a React application by typing:

```shell
create-react-app client
```

After a few seconds, you will get a `client` folder with all you need inside it. In particular, the `src` subfolder contains the source code of your brand-new application. Our goal is to change the code of this basic React application and replace it with our flight timetable frontend application.

Since our application will show data in a tabular form, you will install a React component that simplifies the task of rendering data in a table: [React Table](https://react-table.js.org). To add this component to your application, type the following command in the terminal with the `client` folder as your current working directory:

```shell
npm install react-table
```

Now you are ready to change the application code. So, open the `App.js` file inside the `src` folder and replace its content with the following code:

```react
// src/App.js

import React, { Component } from 'react';
import ReactTable from 'react-table';
import 'react-table/react-table.css';
import { getInitialFlightData } from './DataProvider';

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      data: getInitialFlightData()
    };

    this.columns = [{
      Header: 'Origin',
      accessor: 'origin'
    }, {
      Header: 'Flight',
      accessor: 'flight'
    }, {
      Header: 'Arrival',
      accessor: 'arrival'
    }, {
      Header: 'State',
      accessor: 'state'
    }];
  }

  render() {
    return (
      <div className="App">
        <ReactTable
          data={this.state.data}
          columns={this.columns}
        />
      </div>
    );
  }
}

export default App;
```

Here, you are importing the stuff you need to set up the flight timetable. In particular, in addition to standard React basic elements, you are importing the `ReactTable` component with its basic stylesheets and the `getInitialFlightData()` function defined in the `DataProvider` module. This function provides your application with the flights' data and you use it in the constructor of the `App` component, where data are assigned to the component state. In the constructor, you also define the table's structure by mapping the flight properties to the table columns. Finally, you put the `ReactTable` component in the JSX output of the `render()` method by specifying the flights' data and the columns mapping.

Now, within the `src` folder, let's create a file named `DataProvider.js` and populate it with the following code:

```javascript
// src/DataProvider.js

export function getInitialFlightData() {
  return [{
    origin: 'London',
    flight: 'A123',
    arrival: '08:15',
    state: ''
  }, {
    origin: 'Berlin',
    flight: 'D654',
    arrival: '08:45',
    state: ''
  }, {
    origin: 'New York',
    flight: 'U213',
    arrival: '09:05',
    state: ''
  }, {
    origin: 'Buenos Aires',
    flight: 'A987',
    arrival: '09:30',
    state: ''
  }, {
    origin: 'Rome',
    flight: 'I768',
    arrival: '10:10',
    state: ''
  }, {
    origin: 'Tokyo',
    flight: 'G119',
    arrival: '10:35',
    state: ''
  }];
}
```

The module exports the `getInitialFlightData()` function that simply returns an array of flight data. In a real case, the function should request the data from the server, but the current implementation is enough for our purpose. 

Our application so far presents the flight data in tabular form. Let's check it out in the browser! To run the app, type the following command in the terminal with the `client` folder as the current working directory:

```shell
npm start
```

After a few seconds, you should see in the browser the list of flights as shown in the picture above. If the browser doesn't open automatically, please open it and go to `http://localhost:3000`.

## Getting the Server Events

Once the client initial appearance is ready, let's add some code to enable it catching the server-side generated events.

As a first step, let's add the `eventSource` property to the `App` component and assign an `EventSource` instance, as shown by the following code:

```react
// src/App.js
//...
class App extends Component {
  constructor(props) {
    //...
    this.eventSource = new EventSource('events');
  }
//...
}
```

The `EventSource()` constructor allows to create an object that initiates a communication with the server by making an HTTP request to the endpoint whose URL is passed as an argument. In our case, the client expects a stream of events from the `events` endpoint within the same domain of the client. That is, if the client URL is, for example, `http://localhost:3000` then the server endpoint pushing data will be at `http://localhost:3000/events`.

Now, let's capture the events sent by the server just adding a few lines of code. The new `App` class will look like the following:

```react
// src/App.js

import React, { Component } from 'react';
import ReactTable from 'react-table';
import 'react-table/react-table.css';
import { getInitialFlightData } from './DataProvider';

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      data: getInitialFlightData()
    };

    this.columns = [{
      Header: 'Origin',
      accessor: 'origin'
    }, {
      Header: 'Flight',
      accessor: 'flight'
    }, {
      Header: 'Arrival',
      accessor: 'arrival'
    }, {
      Header: 'State',
      accessor: 'state'
    }];
    this.eventSource = new EventSource('events');
  }

  componentDidMount() {
    this.eventSource.onmessage = (e) => this.updateFlightState(JSON.parse(e.data));
  }
  
  updateFlightState(flightState) {
    let newData = this.state.data.map((item) => {
      if (item.flight === flightState.flight) {
        item.state = flightState.state;
      }
      return item;
    });

    this.setState(Object.assign({}, {data: newData}));
  }

  render() {
    return (
      <div className="App">
        <ReactTable
          data={this.state.data}
          columns={this.columns}
        />
      </div>
    );
  }
}

export default App;
```

As you can see, in the `componentDidMount()` method an event handler has been added to the `onmessage` property of the `eventSource` object. The event handler calls the `updateFlightState()` method in order to update the component state with the data sent by the server. The handler is executed whenever the server sends a new event.  Each event will transmit specific data in `e.data` property represented as a string. In our case, the data will be a JSON string representing a flight data with its state update, as we will see in next section.

## Building the Server

The server-side of our application is a simple *Node.js* web server responding to requests submitted to the *events* URL. To implement it create a `server.js` file and put the following code inside it:

```javascript
// server.js

const http = require('http');

http.createServer((request, response) => {
  console.log("Requested url: " + request.url);
  
  if (request.url.toLowerCase() == "/events") {
    response.writeHead(200, {
      'Connection': 'keep-alive',
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache'
    });
	
    setTimeout(() => {
      response.write(
        'data: {"flight": "I768", "state": "landing"}'
      );
      response.write('\n\n');
    }, 3000);	
    
    setTimeout(() => {
      response.write(
        'data: {"flight": "I768", "state": "landed"}'
      );
      response.write('\n\n');
    }, 6000);
	
  } else {
    response.writeHead(404);
    response.end();
  }
}).listen(5000);
console.log('Server running at http://127.0.0.1:5000/');
```

At the beginning of the file, you import the `http` module and use its `createServer()` method to run a web server whose behaviour is described by the callback function passed as an argument. The callback function verifies that the requested URL is `/events` and only in this case initiates a response by sending a few HTTP headers. The headers sent by the server are very important in order to establish a live channel with the client.

In fact, the `keep-alive` value for the `Connection` header says the client to handle a permanent connection, that is a connection that doesn't end with the first bunch of data received.

The `text/event-stream` value for the `Content-Type` header determines the way the client should interpret the data that it will receive. In practice, this value says to the client that we are implementing the Server-Sent Events protocol.

Finally, the `Cache-Control` header asks the client not to store data into its local cache, so that data read by the client is really sent by the server.

After sending these headers, the client using the `EventSource()` constructor will wait for events reporting newly available data. The rest of the function body schedules the execution of a few functions in order to simulate the change of a flight state. At each scheduled function execution, a string in the following form is sent to the client:

```
data: xxxxxxx
```

The `xxxxxxx` represents the data to be sent to the client. In our case, we send a JSON string representing a flight. You can send multiple data lines in an event response, but the response must be closed by a double empty line. In other words, your event message could be like in the following schema:

```
data: This is a message\n
data: A long message\n
\n
\n
```

In order to execute the web server you created so far, type the following command in a shell window:

```shell
node server.js
```

## Putting All Together

So, we built the React client and the Node.js server and want they communicate with each other. However, they run on different domains: the React client runs on http://localhost:3000 domain and the Node.js server runs on http://localhost:5000 domain.

This means that the JavaScript code of the React client running on your browser cannot make HTTP requests to the Node.js server, due to the [same origin policy](https://en.wikipedia.org/wiki/Same-origin_policy) applied by the browser itself. 

We could get around the problem by simply adding a `proxy` value in the `package.json` file, as said in the [create-react-app documentation](https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#proxying-api-requests-in-development). However, due to a [known issue](https://github.com/facebook/create-react-app/issues/3391), currently this workaround is not applicable.

So, in order to make the client and server to communicate, we need to enable CORS ([Cross-origin resource sharing](https://auth0.com/docs/cross-origin-authentication)). With this approach, the server authorizes a client published on a different domain to request its resources. To enable CORS in our Node.js server we simply add a new header to be sent to the client: the `Access-Control-Allow-Origin` header. Our initial response now becomes as shown below:

```javascript
// server.js

    response.writeHead(200, {
      'Connection': 'keep-alive',
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Access-Control-Allow-Origin': '*'
    });
```

The asterisk assigned to the `Access-Control-Allow-Origin` header indicates that any client is authorized to access this URL. It may not be the desired solution in a production environment. In fact, in the production environment, you should adopt a different approach, such as put the two applications under the same domain, by using a reverse proxy, or by enabling [CORS](https://auth0.com/docs/cross-origin-authentication) selectively, that is authorizing only specific domains.

Once you have enabled CORS on the Node.js server, you should change the URL passed to the `EventSource()` constructor. Now the `EventSource` object initialization in the React client should look like the following:

```javascript
this.eventSource = new EventSource('http://localhost:5000/events');
```

Now all is ready! Run the server then launch the client application. After a few seconds you should see your browser showing something like the following:

![](.\xxx-images\animated-flights-timetable.gif)

## Managing Event Types

The timetable application developed so far responds to server events always in the same way: by updating the specific flight sent in the event's `data` property. How could we manage a different situation?

Suppose, for example, that you want to remove the row describing a flight after a certain amount of time it landed. How could the server communicate an event that is not a state change? How can the client capture an event saying that it should remove a row from the table?

You could think of using the `data` property of the event to specify a distinguishing event information. However Server-Sent Events protocol allows to specify an event so that you can handle different type of events in an easy way. We are talking about the `event` keyword. Let's take a look at how our server's code changes:

```javascript
// server.js

const http = require('http');

http.createServer((request, response) => {
  console.log("Requested url: " + request.url);
  
  if (request.url.toLowerCase() == "/events") {
    response.writeHead(200, {
      'Connection': 'keep-alive',
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Access-Control-Allow-Origin': '*'
    });
	
    setTimeout(() => {
	  response.write(
        'event: flightStateUpdate\n'
      );
      response.write(
        'data: {"flight": "I768", "state": "landing"}'
      );
      response.write('\n\n');
    }, 3000);	
    
    setTimeout(() => {
	  response.write(
        'event: flightStateUpdate\n'
      );
      response.write(
        'data: {"flight": "I768", "state": "landed"}'
      );
      response.write('\n\n');
    }, 6000);
	
    setTimeout(() => {
	  response.write(
        'event: flightRemoval\n'
      );
      response.write(
        'data: {"flight": "I768"}'
      );
      response.write('\n\n');
    }, 9000);
  } else {
    response.writeHead(404);
    response.end();
  }
}).listen(5000);
console.log('Server running at http://127.0.0.1:5000/');
```

While composing the response, we added a new `event` string before the `data` string. The `event` keyword helps you to specify the type of event you are sending to the client. In the example shown above, we indicated the `filghtStateUpdate` value for the previously existing events and added a new event with the `flightRemoval` value for `event` keyword. As you can easily imagine, you are saying to your client that some events concern the update of the flight's state and some others the removal of the flight. You will expect that the client will perform different actions for different types of events.

So, let's see how the client handles these events:

```react
// src/App.js

import React, { Component } from 'react';
import ReactTable from 'react-table';
import { getInitialFlightData } from './DataProvider';
import 'react-table/react-table.css';

class App extends Component {
  constructor(props) {
    //Initialization code
    //...
    this.eventSource = new EventSource('http://localhost:5000/events');
  }

  componentDidMount() {
    this.eventSource.addEventListener('flightStateUpdate', 
      (e) => this.updateFlightState(JSON.parse(e.data)));
    this.eventSource.addEventListener('flightRemoval',
      (e) => this.removeFlight(JSON.parse(e.data)));
  }

  updateFlightState(flightState) {
    let newData = this.state.data.map((item) => {
      if (item.flight === flightState.flight) {
        item.state = flightState.state;
      }
      return item;
    });

    this.setState(Object.assign({}, {data: newData}));
  }

  removeFlight(flightInfo) {
    const newData = this.state.data.filter((item) => item.flight !== flightInfo.flight);

    this.setState(Object.assign({}, {data: newData}));
  }

  render() {
    return (
      <div className="App">
        <ReactTable
          data={this.state.data}
          columns={this.columns}
        />
      </div>
    );
  }
}

export default App;

```

As you can see, the body of the `componentDidMont()` method has no longer the assignment of the event handler to the `onmessage` property. Now we are using the `addEventListener()` method in order to assign an event handler to a specific event. In this way, you are able to easily assign a specific event handler to each event generated by the server like it was generated by any standard HTML element.

In the example we assigned the `updateFlightState()` method to the `flightStateUpdate` event, and the `removeFlight()` method to the `flightRemoval` event.

## Handling Connection Closure

The Server-Sent Event connection between the client and the server is a streaming connection. This means that the connection will be kept active indefinitely unless the client or the server stops running. If your server has no more events to send or the client isn't longer interested in server's events, how can you explicitly stop the currently active connection?

Let's consider the case where the client wants to stop the event stream. Create a button that allows the user to stop receiving new events. So, change the `render()` method of the `App` class, as shown below:

```react
  render() {
    return (
      <div className="App">
        <button onClick={() => this.stopUpdates()}>Stop updates</button>
        <ReactTable
          data={this.state.data}
          columns={this.columns}
        />
      </div>
    );
  }
```

Here we added a `<button>` element and bound the click event to the `stopUpdates()` method of the same component. This method will look like the following:

```javascript
  stopUpdates() {
    this.eventSource.close();
  }
```

In other words, to stop the event stream you simply invoked the `close()` method of the `eventSource` object.

Closing the event stream on the client doesn't automatically closes the connection on the server side. This means that the server will continue to send events to the client. You need to intercept on the server side the request of connection closing. You can do it by adding an event handler for the `close` event on the server side, as shown by the following code:

```javascript
// server.js

const http = require('http');

http.createServer((request, response) => {
  console.log(`Request url: ${request.url}`);

  const eventHistory = [];

  request.on('close', () => {
    closeConnection(response);
  });

  if (request.url.toLowerCase() === '/events') {
    response.writeHead(200, {
      'Connection': 'keep-alive',
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Access-Control-Allow-Origin': '*'
    });

  //Event generation code
  //..
  } else {
    response.writeHead(404);
    response.end();  
  }
}).listen(5000, () => {
  console.log('Server running at http://127.0.0.1:5000/');
});

function closeConnection(response) {
  if (!response.finished) {
    response.end();
    console.log('Stopped sending events.');
  }
}
```

The `request.on()` method catches the `close` request and executes the `closeConnection()` function. The `closeConnection()` method invoke the `response.end()` method to close the HTTP connection. It also checks if the connection is already closed: this situation may occur when multiple closing requests are sent by the client.

Since our server event generators are scheduled by using `setTimeout()`, it could happen that an attempt to send an event to the client may be made after the connection has been closed, raising an exception. We can avoid this by checking if the connection is still active, as shown in the following example:

```javascript
    setTimeout(() => {
      if (!response.finished) {
	    response.write(
          'event: flightStateUpdate\n'
        );
        response.write(
          'data: {"flight": "I768", "state": "landing"}'
        );
        response.write('\n\n');
      }
    }, 3000);	
```

When the connection closure has to be originated by the server, it will be done by invoking the `response.end()` method, as seen before. Also, the client should be informed about the closure, so that it can free resources on its side. What usually happens is the generation of a specific event that delegates to the client to request the connection closing. For example, our server could simply generate a `closedConnection` event as follows:

```javascript
   setTimeout(() => {
      if (!response.finished) {
	    response.write(
          'event: closedConnection\n'
        );
        response.write(
          'data: '
        );
        response.write('\n\n');
      }
    }, 3000);
```

This event should be handled by the client as in the following:

```react
// src/App.js

import React, { Component } from 'react';
import ReactTable from 'react-table';
import { getInitialFlightData } from './DataProvider';
import 'react-table/react-table.css';

class App extends Component {
  constructor(props) {
    //Initialization code
  }

  componentDidMount() {
    this.eventSource.addEventListener('flightStateUpdate', 
      (e) => this.updateFlightState(JSON.parse(e.data)));
    this.eventSource.addEventListener('flightRemoval',
      (e) => this.removeFlight(JSON.parse(e.data)));
    this.eventSource.addEventListener('closedConnection',
      (e) => this.stopUpdates());
  }

  updateFlightState(flightState) {
    //Update state code
  }

  removeFlight(flightInfo) {
    //Remove flight code
  }

  stopUpdates() {
    this.eventSource.close();
  }

  render() {
    //Render code
  }
}

export default App;
```

It assigns the `stopUpdates()` method to the `closedConnection` event and starts the connection closure process you already saw above.

## Handling Connection Recovery

So far you built a complete event system management: you are able to get different types of events pushed by the server and to control the end of the event stream. But what happens if the client loses some event due to network issues? Of course, it depends on the specific application. In some situations, you may ignore the loss of some event, in some others you can't. 

Consider, for example, the event stream we implemented so far. If a network issue happens and the client loses the `flightStateUpdate` event that puts the flight into the landing state, it could not be a big problem. Simply the user will not be able to see the landing phase on the timetable, but when the connection will be restored the timetable will provide correct information with the subsequent states.  However, if the network issue happens immediately after the flight enters in the landing state and the connection is restored after the `flightRemoval` event, you have an issue: the flight will remain in the landing state forever and you need to handle this bad situation.

The Server-Sent Events protocol help us by providing a mechanism to identify events and to restore a dropped connection. Let's try to explain.

When the server generates an event, you have the ability to assign an identifier by attaching an `id` keyword to the response to be sent to the client. For example, you could send the `flightStateUpdate` event as shown by the following code:

```javascript
setTimeout(() => {
  if (!response.finished) {
    const eventString = 'id: 1\nevent: flightStateUpdate\ndata: {"flight": "I768", "state": "landing"}\n\n';
    response.write(eventString);
  }
}, 3000);
```

Here we did a little refactoring of the code and added the `id` keyword with 1 as its value.

When a network issue happens and the connection to an event stream is lost, the browser will automatically attempt to restore the connection. When the connection is established again, the browser will automatically send the identifier of the last received event in the `Last-Event-Id` HTTP header. So, the server should be changed in order to handle this request of restoring the event stream. It is up to the server to decide if sending all missed events or continue with newly generated events. Anyway, if the server needs to send all missed events, it also needs to store all events already sent to the client.

Let's implement this strategy in our server. With a bit of refactoring, the following is the final version of the server side code:

```javascript
// server.js

const http = require('http');

http.createServer((request, response) => {
  console.log(`Request url: ${request.url}`);

  const eventHistory = [];

  request.on('close', () => {
    closeConnection(response);
  });

  if (request.url.toLowerCase() === '/events') {
    response.writeHead(200, {
      'Connection': 'keep-alive',
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Access-Control-Allow-Origin': '*'
    });

    checkConnectionToRestore(request, response, eventHistory);

    sendEvents(response, eventHistory);
  } else {
    response.writeHead(404);
    response.end();  
  }
}).listen(5000, () => {
  console.log('Server running at http://127.0.0.1:5000/');
});

function sendEvents(response, eventHistory) {
  setTimeout(() => {
    if (!response.finished) {
      const eventString = 'id: 1\nevent: flightStateUpdate\ndata: {"flight": "I768", "state": "landing"}\n\n';
      response.write(eventString);
      eventHistory.push(eventString);
    }
  }, 3000);

  setTimeout(() => {
    if (!response.finished) {
      const eventString = 'id: 2\nevent: flightStateUpdate\ndata: {"flight": "I768", "state": "landed"}\n\n';
      response.write(eventString);
      eventHistory.push(eventString);
    }
  }, 6000);

  setTimeout(() => {
    if (!response.finished) {
      const eventString = 'id: 3\nevent: flightRemoval\ndata: {"flight": "I768"}\n\n';
      response.write(eventString);
      eventHistory.push(eventString);
    }
  }, 9000);

  setTimeout(() => {
    if (!response.finished) {
      const eventString = 'id: 4\nevent: closedConnection\ndata: \n\n';
      eventHistory.push(eventString);
    }
  }, 12000);
}

function closeConnection(response) {
  if (!response.finished) {
    response.end();
    console.log('Stopped sending events.');
  }
}

function checkConnectionToRestore(request, response, eventHistory) {
  if (request.headers['last-event-id']) {
    const eventId = parseInt(request.headers['last-event-id']);

    eventsToReSend = eventHistory.filter((e) => e.id > eventId);

    eventsToReSend.forEach((e) => {
      if (!response.finished) {
        response.write(e);
      }
    });
  }
}
```

We introduced the `eventHistory` array, where the events sent to the client are stored.

Then we assigned to the `checkConnectionToRestore()` function the task of checking and restoring possible broken connections and encapsulated the code for event generation in the `sendEvents()` function.

You can see that now each time an event is sent to the client, it is also stored in the `eventHistory` array, as you can check in the following code:

```javascript
setTimeout(() => {
  if (!response.finished) {
    const eventString = 'id: 1\nevent: flightStateUpdate\ndata: {"flight": "I768", "state": "landing"}\n\n';
    response.write(eventString);
    eventHistory.push(eventString);
  }
}, 3000);
```

If the `checkConnectionToRestore()` function find the `Last-Event-Id` HTTP header in the request, it filters the already sent events in the `eventHistory` array and sends them again to the client, as you can see in the code below:

```javascript
function checkConnectionToRestore(request, response, eventHistory) {
  if (request.headers['last-event-id']) {
    const eventId = parseInt(request.headers['last-event-id']);

    eventsToReSend = eventHistory.filter((e) => e.id > eventId);

    eventsToReSend.forEach((e) => {
      if (!response.finished) {
        response.write(e);
      }
    });
  }
```

This completes and makes more robust our system.

## Browser Support

According to [caniuse.com](https://caniuse.com/#search=server%20sent%20events), Server-Sent Events are currently supported by all major browsers but Internet Explorer, Edge and Opera Mini. Although [supporting them in Edge is under consideration](https://developer.microsoft.com/en-us/microsoft-edge/platform/status/serversenteventseventsource/), the lack of universal support forces you to use polyfills, such as [Remy Sharp's EventSource.js](https://github.com/remy/polyfills/blob/master/EventSource.js) or [Yaffle's EventSource](https://github.com/Yaffle/EventSource) or [AmvTek's EventSource](https://github.com/amvtek/EventSource).

Using these polyfills is very simple. Here is an example of using AmvTek's polyfill, but using the other ones is not so different. In order to add AmvTek's EventSource polyfill to our React client application, you need to install it via `npm`, as shown below: 

```shell
npm install eventsource-polyfill
```

Now you should import the module in the `App` component's module:

```react
// src/App.js

import React, { Component } from 'react';
import ReactTable from 'react-table';
import 'react-table/react-table.css';
import { getInitialFlightData } from './DataProvider';
import 'eventsource-polyfill'

class App extends Component {
  //Component code
}
```

That's all. The polyfill will define an `EventSource` constructor only if it is not natively supported and your code will continue to work as before also on browsers that don't support it.

## Server-Sent Events vs WebSockets

Using Server Side Events helps to resolve some common issues that involve waiting for data from the server. Instead of implementing a long polling whose main drawback is consuming resources both on the client and on the server side, you get a simple and performant solution.

An alternative approach is based on [WebSockets](https://www.w3.org/TR/websockets/), a standard TCP based protocol providing full duplex communication between the client and the server. What benefits does WebSockets bring with respect to Server-Sent Events? When to use one technology instead of the other?

The following are some considerations to keep in mind when choosing between Server-Sent Events and WebSockets:

- WebSockets supports a bidirectional communication, while Server-Sent Events supports only communication from the server to the client
- WebSockets is a low-level protocol, while Server-Sent Events is based on HTTP and so it doesn't require additional settings in the network infrastructure
- WebSockets supports binary data transfer, while Server-Sent Events supports only text-based data transfer; if you want to transfer binary data via Server-Sent Events you need to encode it in Base64
- The combination of low-level protocol and support of binary data transfer makes WebSockets more suitable than Server-Sent Events for applications requiring real-time binary data transfer as may happen in gaming or other similar application types

## Summary

In this article, we used Server-Sent Events to implement a client-server application simulating a flight timetable. During the implementation, we had the opportunity to explore the features that the standard provides us in order to support event typing, connection control and restoring. We also faced the problem to add polyfills for browsers not supporting Server-Sent Events and we showed a comparison with WebSockets.

You can download the final code of the project developed throughout the post from [this GitHub repository](https://github.com/andychiare/server-sent-events).
